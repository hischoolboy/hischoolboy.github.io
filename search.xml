<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Linux常用命令记录]]></title>
      <url>/2017/07/07/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h1 id="一、内存监控"><a href="#一、内存监控" class="headerlink" title="一、内存监控"></a>一、内存监控</h1><p>监控内存的使用状态是非常重要的，通过监控有助于了解内存的使用状态，比如内存占用是否正常，内存是否紧缺等等，监控内存最常使用的命令有free、vmstat、top等</p>
<a id="more"></a>
<h2 id="1-1-free"><a href="#1-1-free" class="headerlink" title="1.1 free"></a>1.1 free</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@admin-pc ~]<span class="comment"># free</span></div><div class="line">              total        used        free      shared  buff/cache   available</div><div class="line">Mem:        5946700     3722220      149388        8188     2075092     1825812</div><div class="line">Swap:       8257532     1602628      6654904</div></pre></td></tr></table></figure>
<p>第一行（Mem）：</p>
<ul>
<li>total：内存总数 5946700 KB</li>
<li>used：已使用的内存数 3722220 KB</li>
<li>free：空闲的内存数 3722220 KB</li>
<li>shared：多个进程共享的内存，总是149388</li>
<li>buffers：缓存内存数 8188 KB</li>
<li>cached：缓存内存数 2075092 KB</li>
<li>available：可以使用的内存总量 1825812KB</li>
</ul>
<p>第二行（Swap）：表示交换分区的内存使用状态。</p>
<p>另外，我们可以使用参数-m、-g来以MB、GB单位显示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@admin-pc ~]<span class="comment"># free -m</span></div><div class="line">              total        used        free      shared  buff/cache   available</div><div class="line">Mem:           5807        3631         159           7        2017        1787</div><div class="line">Swap:          8063        1565        6498</div></pre></td></tr></table></figure>
<h2 id="1-2-vmstat"><a href="#1-2-vmstat" class="headerlink" title="1.2 vmstat"></a>1.2 vmstat</h2><p>vmstat（Virtual Meomory Statistics，虚拟内存统计）是对系统的整体情况进行统计，包括内核进程、虚拟内存、磁盘、陷阱和 CPU 活动的统计信息。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@admin-pc ~]<span class="comment"># vmstat 2 100    # 2表示刷新间隔，100表示输出次数</span></div><div class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</div><div class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   <span class="keyword">in</span>   cs us sy id wa st</div><div class="line"> 0  0 1602544 147972      0 2078500    2    2    32   181    2    3 15  5 79  0  0</div><div class="line"> 1  0 1602544 147972      0 2078500    0    0     0     0  607 1051  5  2 93  0  0</div><div class="line"> 0  0 1602544 147724      0 2078516    0    0     0    10  710 1141  7  2 91  0  0</div><div class="line"> 0  0 1602544 148096      0 2078516    0    0     0     0  618 1062  6  1 93  0  0</div><div class="line"> 0  0 1602544 147848      0 2078516    0    0     0     0  666 1113  6  1 93  0  0</div><div class="line"> 0  0 1602544 147600      0 2078516    0    0     0    90  626 1075  5  2 93  0  0</div><div class="line"> 2  0 1602544 147600      0 2078536    0    0     0    68  620 1082  5  1 94  0  0</div></pre></td></tr></table></figure>
<p><strong>1）procs</strong></p>
<ul>
<li><strong>r列</strong>表示运行和等待CPU时间片的进程数，这个值如果长期大于系统CPU个数，就说明CPU资源不足，可以考虑增加CPU；</li>
<li><strong>b列</strong>表示在等待资源的进程数，比如正在等待I/O或者内存交换等。</li>
</ul>
<p><strong>2）memory</strong></p>
<ul>
<li><strong>swpd列</strong>表示切换到内存交换区的内存数量（以KB为单位）。如果swpd的值不为0或者比较大，而且si、so的值长期为0，那么这种情况一般不用担心，不会影响系统性能；</li>
<li><strong>free列</strong>表示当前空闲的物理内存数量（以KB为单位）；</li>
<li><strong>buff列</strong>表示buffers cache的内存数量，一般对块设备的读写才需要缓冲；</li>
<li><strong>cache列</strong>表示page cached的内存数量，一般作文件系统的cached，频繁访问的文件都会被cached。如果cached值较大，就说明cached文件数较多。如果此时IO中的bi比较小，就说明文件系统效率比较好。</li>
</ul>
<p><strong>3）swap</strong></p>
<ul>
<li><strong>si列</strong>表示由磁盘调入内存，也就是内存进入内存交换区的数量；</li>
<li><strong>so列</strong>表示由内存调入磁盘，也就是内存交换区进入内存的数量</li>
<li>一般情况下，si、so的值都为0，如果si、so的值长期不为0，则表示系统内存不足，需要考虑是否增加系统内存。</li>
</ul>
<p><strong>4）IO</strong></p>
<ul>
<li><strong>bi列</strong>表示从块设备读入的数据总量（即读磁盘，单位KB/秒）</li>
<li><strong>bo列</strong>表示写入到块设备的数据总量（即写磁盘，单位KB/秒）<br>这里设置的bi+bo参考值为1000，如果超过1000，而且wa值比较大，则表示系统磁盘IO性能瓶颈。</li>
</ul>
<p><strong>5）system</strong></p>
<ul>
<li><strong>in列</strong>表示在某一时间间隔中观察到的每秒设备中断数；</li>
<li><strong>cs列</strong>表示每秒产生的上下文切换次数。<br>上面这两个值越大，会看到内核消耗的CPU时间就越多。</li>
</ul>
<p><strong>6）CPU</strong></p>
<ul>
<li><strong>us列</strong>显示了用户进程消耗CPU的时间百分比。us的值比较高时，说明用户进程消耗的CPU时间多，如果长期大于50%，需要考虑优化程序啥的。</li>
<li><strong>sy列</strong>显示了内核进程消耗CPU的时间百分比。sy的值比较高时，说明内核消耗的CPU时间多；如果us+sy超过80%，就说明CPU的资源存在不足。</li>
<li><strong>id列</strong>显示了CPU处在空闲状态的时间百分比；</li>
<li><strong>wa列</strong>表示IO等待所占的CPU时间百分比。wa值越高，说明IO等待越严重。如果wa值超过20%，说明IO等待严重。</li>
<li><strong>st列</strong>一般不关注，虚拟机占用的时间百分比。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">[root@admin-pc ~]<span class="comment"># vmstat -s</span></div><div class="line">      5946700 K total memory</div><div class="line">      3716904 K used memory</div><div class="line">      3260652 K active memory</div><div class="line">      1930856 K inactive memory</div><div class="line">       242680 K free memory</div><div class="line">            0 K buffer memory</div><div class="line">      1987116 K swap cache</div><div class="line">      8257532 K total swap</div><div class="line">      1602532 K used swap</div><div class="line">      6655000 K free swap</div><div class="line">     83731438 non-nice user cpu ticks</div><div class="line">     38250235 nice user cpu ticks</div><div class="line">     40320442 system cpu ticks</div><div class="line">    633581586 idle cpu ticks</div><div class="line">      2541902 IO-wait cpu ticks</div><div class="line">            0 IRQ cpu ticks</div><div class="line">      1150221 softirq cpu ticks</div><div class="line">            0 stolen cpu ticks</div><div class="line">    254322257 pages paged <span class="keyword">in</span></div><div class="line">   1448195112 pages paged out</div><div class="line">      4378218 pages swapped <span class="keyword">in</span></div><div class="line">      4160434 pages swapped out</div><div class="line">    320784619 interrupts</div><div class="line">   1659307310 CPU context switches</div><div class="line">   1494468925 boot time</div><div class="line">      6691009 forks</div></pre></td></tr></table></figure>
<p>上面的信息主要来自于/proc/meminfo，/proc/stat和/proc/vmstat。</p>
<h1 id="二、CPU监控"><a href="#二、CPU监控" class="headerlink" title="二、CPU监控"></a>二、CPU监控</h1><h2 id="2-1-top"><a href="#2-1-top" class="headerlink" title="2.1 top"></a>2.1 top</h2><p>top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况及总体状况，类似于Windows的任务管理器。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">[root@admin-pc ~]<span class="comment"># top</span></div><div class="line">top - 19:47:02 up 47 days,  9:31,  2 users,  load average: 0.37, 0.36, 0.40</div><div class="line">Tasks: 294 total,   1 running, 293 sleeping,   0 stopped,   0 zombie</div><div class="line">%Cpu(s):  3.0 us,  2.4 sy,  4.9 ni, 89.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">KiB Mem :  5946700 total,   234704 free,  3718036 used,  1993960 buff/cache</div><div class="line">KiB Swap:  8257532 total,  6655000 free,  1602532 used.  1830408 avail Mem </div><div class="line"></div><div class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                          </div><div class="line"> 7104 libstor+  39  19 3663652 664856   4524 S  13.5 11.2   8423:53 java                                                                                                             </div><div class="line"> 6868 chrony    20   0 22.975g 2.187g  51664 S   1.6 38.6   8923:29 java                                                                                                             </div><div class="line">21257 root      20   0  157852   2436   1564 R   1.3  0.0   0:00.23 top                                                                                                              </div><div class="line"> 2905 root      20   0 1838968 154024   6868 S   1.0  2.6  34:42.96 gnome-shell                                                                                                      </div><div class="line"> 3229 root      20   0  377552   1856   1344 S   1.0  0.0 643:40.10 vmtoolsd                                                                                                         </div><div class="line"> 7124 saslauth  20   0 1266752  68048   5248 S   1.0  1.1 586:38.11 node                                                                                                             </div><div class="line">10863 root      20   0 1986700 177388   7660 S   1.0  3.0  36:42.12 gnome-shell                                                                                                      </div><div class="line">11021 root      20   0  508504  19644   1372 S   0.7  0.3 365:34.50 vmtoolsd                                                                                                         </div><div class="line">  410 root      20   0       0      0      0 S   0.3  0.0  49:34.76 xfsaild/dm-0                                                                                                     </div><div class="line">  750 avahi     20   0   30308   1432   1084 S   0.3  0.0   1:30.41 avahi-daemon                                                                                                     </div><div class="line">  770 root      20   0  240576   3516   1536 S   0.3  0.1 136:56.94 vmtoolsd                                                                                                         </div><div class="line"> 2025 root      20   0  241272   4300    916 S   0.3  0.1   0:39.91 Xvnc                                                                                                             </div><div class="line"> 2854 root      20   0  537332   3988   1492 S   0.3  0.1 134:18.38 docker-containe                                                                                                  </div><div class="line"> 4429 root      20   0       0      0      0 S   0.3  0.0  47:08.37 xfsaild/dm-4                                                                                                     </div><div class="line">21242 root      20   0       0      0      0 S   0.3  0.0   0:00.01 kworker/0:1                                                                                                      </div><div class="line">    1 root      20   0  193632   4436   2476 S   0.0  0.1   5:40.23 systemd                                                                                                          </div><div class="line">    2 root      20   0       0      0      0 S   0.0  0.0   0:11.63 kthreadd                                                                                                         </div><div class="line">    3 root      20   0       0      0      0 S   0.0  0.0   5:46.73 ksoftirqd/0                                                                                                      </div><div class="line">    7 root      rt   0       0      0      0 S   0.0  0.0   1:41.88 migration/0                                                                                                      </div><div class="line">    8 root      20   0       0      0      0 S   0.0  0.0   0:00.00 rcu_bh                                                                                                           </div><div class="line">    9 root      20   0       0      0      0 S   0.0  0.0 187:32.38 rcu_sched                                                                                                        </div><div class="line">   10 root      rt   0       0      0      0 S   0.0  0.0   0:49.26 watchdog/0                                                                                                       </div><div class="line">   11 root      rt   0       0      0      0 S   0.0  0.0   0:51.36 watchdog/1                                                                                                       </div><div class="line">   12 root      rt   0       0      0      0 S   0.0  0.0   1:42.05 migration/1                                                                                                      </div><div class="line">   13 root      20   0       0      0      0 S   0.0  0.0   5:57.92 ksoftirqd/1                                                                                                      </div><div class="line">   17 root      20   0       0      0      0 S   0.0  0.0   0:00.04 kdevtmpfs                                                                                                        </div><div class="line">   18 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 netns                                                                                                            </div><div class="line">   19 root      20   0       0      0      0 S   0.0  0.0   0:08.58 khungtaskd                                                                                                       </div><div class="line">   20 root       0 -20       0      0      0 S   0.0  0.0   0:00.02 writeback                                                                                                        </div><div class="line">   21 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kintegrityd                                                                                                      </div><div class="line">   22 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 bioset                                                                                                           </div><div class="line">   23 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kblockd                                                                                                          </div><div class="line">   24 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 md                                                                                                               </div><div class="line">   31 root      20   0       0      0      0 S   0.0  0.0   9:31.46 kswapd0                                                                                                          </div><div class="line">   32 root      25   5       0      0      0 S   0.0  0.0   0:01.41 ksmd                                                                                                             </div><div class="line">   33 root      39  19       0      0      0 S   0.0  0.0   4:11.76 khugepaged                                                                                                       </div><div class="line">   34 root      20   0       0      0      0 S   0.0  0.0   0:00.10 fsnotify_mark                                                                                                    </div><div class="line">   35 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 crypto                                                                                                           </div><div class="line">   43 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kthrotld</div></pre></td></tr></table></figure>
<p>第一行：</p>
<ul>
<li><strong>19:47:02：</strong> 当前时间</li>
<li><strong>up 47 days, 9:31：</strong>系统运行时间，系统已经运行了47天9小时31分钟了。</li>
<li><strong>2 users：</strong>当前登录用户数</li>
<li><strong>load average：</strong>系统负载，即任务队列的平均长度。三个数值分别为最近1分钟、最近5分钟、最近15分钟的平均负载 —— 超过N（CPU核数）说明系统满负荷运行。也可以通过$w或$uptime命令查看load average。</li>
<li><p>第二行：</p>
</li>
<li><p>显示进程总数、正在运行的进程数、休眠的进程数、停止的进程数、僵尸进程数</p>
</li>
</ul>
<p>第三行：</p>
<ul>
<li><strong>%us：</strong>用户进程消耗的CPU百分比</li>
<li><strong>%sy：</strong>内核进程消耗的CPU百分比</li>
<li><strong>%ni：</strong>改变过优先级的进程占用CPU的百分比</li>
<li><strong>%id：</strong>空闲CPU的百分比</li>
<li><strong>%wa：</strong>IO等待消耗的CPU百分比</li>
</ul>
<p>按”1”查看单个CPU的状况：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@admin-pc ~]<span class="comment"># top</span></div><div class="line">top - 19:57:19 up 47 days,  9:41,  2 users,  load average: 0.52, 0.34, 0.37</div><div class="line">Tasks: 293 total,   3 running, 290 sleeping,   0 stopped,   0 zombie</div><div class="line">%Cpu0  : 19.5 us, 18.1 sy,  2.7 ni, 59.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu1  :  3.4 us,  3.4 sy,  6.7 ni, 86.5 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div></pre></td></tr></table></figure></p>
<p>另外，下面的命令可以查看CPU的核数：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@admin-pc ~]<span class="comment"># grep 'model name' /proc/cpuinfo | wc -l</span></div><div class="line">2</div></pre></td></tr></table></figure></p>
<h2 id="2-2-mpstat"><a href="#2-2-mpstat" class="headerlink" title="2.2 mpstat"></a>2.2 mpstat</h2><p>mpstat（Multiprocessor Statistics，<strong>多处理器统计</strong>）是实时系统监控工具，它会报告与CPU相关的统计信息，这些信息存放在/proc/stat文件中。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@admin-pc ~]<span class="comment">#  mpstat -P ALL 2     #    ALL表示显示所有CPUs，也可以指定某个CPU；2表示刷新间隔</span></div><div class="line">Linux 3.10.0-514.16.1.el7.x86_64 (admin-pc)     2017年06月27日     _x86_64_    (2 CPU)</div><div class="line"></div><div class="line">20时00分30秒  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</div><div class="line">20时00分32秒  all    1.75    3.76    1.50    0.25    0.00    0.25    0.00    0.00    0.00   92.48</div><div class="line">20时00分32秒    0    1.52    4.06    1.02    0.00    0.00    0.00    0.00    0.00    0.00   93.40</div></pre></td></tr></table></figure>
<p>至于各百分比的含义前面已经介绍过了，这里就不再赘述。</p>
<h1 id="三、网络监控"><a href="#三、网络监控" class="headerlink" title="三、网络监控"></a>三、网络监控</h1><h2 id="3-1-ethtool"><a href="#3-1-ethtool" class="headerlink" title="3.1 ethtool"></a>3.1 ethtool</h2><p>使用ethtool查看网卡带宽，需要root权限：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">[root@admin-pc ~]<span class="comment"># ethtool ens32</span></div><div class="line">Settings <span class="keyword">for</span> ens32:</div><div class="line">    Supported ports: [ TP ]</div><div class="line">    Supported link modes:   10baseT/Half 10baseT/Full </div><div class="line">                            100baseT/Half 100baseT/Full </div><div class="line">                            1000baseT/Full </div><div class="line">    Supported pause frame use: No</div><div class="line">    Supports auto-negotiation: Yes</div><div class="line">    Advertised link modes:  10baseT/Half 10baseT/Full </div><div class="line">                            100baseT/Half 100baseT/Full </div><div class="line">                            1000baseT/Full </div><div class="line">    Advertised pause frame use: No</div><div class="line">    Advertised auto-negotiation: Yes</div><div class="line">    Speed: 1000Mb/s</div><div class="line">    Duplex: Full</div><div class="line">    Port: Twisted Pair</div><div class="line">    PHYAD: 0</div><div class="line">    Transceiver: internal</div><div class="line">    Auto-negotiation: on</div><div class="line">    MDI-X: off (auto)</div><div class="line">    Supports Wake-on: d</div><div class="line">    Wake-on: d</div><div class="line">    Current message level: 0x00000007 (7)</div><div class="line">                   drv probe link</div><div class="line">    Link detected: yes</div></pre></td></tr></table></figure></p>
<p>可以看出网卡ens32的带宽为1000Mbps（兆比特每秒），所以理论上的网速极限为1000÷8 = 125MB/s。</p>
<h2 id="3-2-sar"><a href="#3-2-sar" class="headerlink" title="3.2 sar"></a>3.2 sar</h2><p>sar命令是Linux下系统运行状态统计工具，它将指定的操作系统状态计数器显示到标准输出设备。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@admin-pc ~]<span class="comment"># sar -n DEV 3 100</span></div><div class="line">Linux 3.10.0-514.16.1.el7.x86_64 (admin-pc)     2017年06月27日     _x86_64_    (2 CPU)</div><div class="line">20时44分36秒     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s</div><div class="line">20时44分39秒 veth283e160      0.00      0.00      0.00      0.00      0.00      0.00      0.00</div><div class="line">20时44分39秒     ens32      8.67      0.67      0.64      0.08      0.00      0.00      0.00</div><div class="line">20时44分39秒        lo      0.00      0.00      0.00      0.00      0.00      0.00      0.00</div><div class="line">20时44分39秒 virbr0-nic      0.00      0.00      0.00      0.00      0.00      0.00      0.00</div><div class="line">20时44分39秒    virbr0      0.00      0.00      0.00      0.00      0.00      0.00      0.00</div><div class="line">20时44分39秒     ens33      1.00      0.00      0.13      0.00      0.00      0.00      0.00</div><div class="line">20时44分39秒   docker0      0.00      0.00      0.00      0.00      0.00      0.00      0.00</div></pre></td></tr></table></figure>
<ul>
<li>IFACE：网络设备的名称</li>
<li>rxpck/s·：每秒钟接收到的包数目</li>
<li>txpck/s·：每秒钟发送出去的包数目</li>
<li>rxkB/s：·每秒钟接收到的字节数</li>
<li>txkB/s：·每秒钟发送出去的字节数</li>
</ul>
<h2 id="3-3-netstat"><a href="#3-3-netstat" class="headerlink" title="3.3 netstat"></a>3.3 netstat</h2><p>netstat命令一般用于检验本机各端口的网络连接情况，用于显示与IP、TCP、UDP和ICMP协议相关的统计数据。</p>
<p>部分选项如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="_">-a</span>, --all, --listening     显示所有连接中的Socket。</div><div class="line">-n, --numeric              以数字形式显示地址和端口号。</div><div class="line">-t, -–tcp                  显示TCP传输协议的连线状况。</div><div class="line">-u, -–udp                  显示UDP传输协议的连线状况。</div><div class="line">-p, --programs             显示正在使用socket的程序名/进程ID</div><div class="line"><span class="_">-l</span>, --listening            显示监控中的服务器的Socket。</div><div class="line">-o, --timers               显示计时器。</div><div class="line"><span class="_">-s</span>, --statistics           显示每个网络协议的统计信息(比如SNMP)</div><div class="line">-i, --interfaces           显示网络界面信息表单（网卡列表）</div><div class="line">-r, --route                显示路由表</div></pre></td></tr></table></figure>
<p>常用的几种：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">netstat -aup        <span class="comment"># 输出所有UDP连接状况</span></div><div class="line">netstat -atp        <span class="comment"># 输出所有TCP连接状况</span></div><div class="line">netstat <span class="_">-s</span>          <span class="comment"># 显示各个协议的网络统计信息</span></div><div class="line">netstat -i          <span class="comment"># 显示网卡列表</span></div><div class="line">netstat -r          <span class="comment"># 显示路由表信息</span></div></pre></td></tr></table></figure></p>
<p>找出程序运行的端口：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@admin-pc ~]<span class="comment"># netstat -ap | grep docker</span></div></pre></td></tr></table></figure>
<p>找出运行在指定端口的进程：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@admin-pc ~]<span class="comment"># netstat -anp | grep 60010</span></div></pre></td></tr></table></figure>
<h1 id="四、磁盘监控"><a href="#四、磁盘监控" class="headerlink" title="四、磁盘监控"></a>四、磁盘监控</h1><h2 id="4-1-df"><a href="#4-1-df" class="headerlink" title="4.1 df"></a>4.1 df</h2><p>df命令的功能是用来检查linux的文件系统的磁盘空间占用情况。如果没有文件名被指定，则显示当前所有被挂载的文件系统，默认以 KB 为单位。</p>
<p>常用选项如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="_">-a</span>  全部文件系统列表</div><div class="line">-h  以方便阅读的方式显示</div><div class="line">-i  显示inode信息</div><div class="line">-T  显示文件系统类型</div><div class="line"><span class="_">-l</span>  只显示本地文件系统</div><div class="line">-k  以KB为单位</div><div class="line">-m  以MB为单位</div></pre></td></tr></table></figure>
<p>最常用的就是$ df -h。</p>
<h2 id="4-2-iostat"><a href="#4-2-iostat" class="headerlink" title="4.2 iostat"></a>4.2 iostat</h2><p>上面在介绍CPU监控时，就可以看到%wa或%iowait这一项，它表示I/O等待所占用CPU的百分比。为了得到关于磁盘IO更详细的状态信息，可以使用 iostat（I/O statistics，输入输出统计）命令：</p>
<p>常用选项如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-c  显示CPU使用情况</div><div class="line"><span class="_">-d</span>  显示磁盘使用情况</div><div class="line">-k  以 KB 为单位显示</div><div class="line">-m  以 M 为单位显示</div><div class="line">-x  显示详细信息</div></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]<span class="comment"># iostat -x -k 2 10  # 2表示刷新间隔，100表示刷新次数</span></div><div class="line">Linux 3.10.0-514.16.1.el7.x86_64 (localhost.localdomain)  2017年07月04日   _x86_64_  (4 CPU)</div><div class="line"></div><div class="line">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</div><div class="line">           2.77    1.56    1.66    0.07    0.00   93.94</div><div class="line"></div><div class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</div><div class="line">sda               0.00     0.74    0.20    7.32    33.22   280.96    83.56     0.02    3.12   24.12    2.53   0.62   0.47</div><div class="line">dm-0              0.00     0.00    0.20    8.05    33.14   280.95    76.14     0.03    3.18   24.72    2.65   0.57   0.47</div><div class="line">dm-1              0.00     0.00    0.00    0.00     0.00     0.00    16.69     0.00    0.35    0.35    0.00   0.33   0.00</div><div class="line">dm-2              0.00     0.00    0.00    0.00     0.01     0.00    53.12     0.00    9.45    9.54    2.75   8.71   0.00</div><div class="line">dm-3              0.00     0.00    0.06    0.23     0.96     4.20    35.09     0.00    5.00   10.83    3.45   0.92   0.03</div><div class="line">dm-4              0.00     0.00    0.04    0.18     0.50     3.24    34.03     0.00    8.33    4.61    9.14   1.15   0.03</div></pre></td></tr></table></figure>
<p>iostat主要是用来监控磁盘I/O，首先输出了CPUs的平均数据（avg-cpu），我们可以看%iowait这一项，除此之外iostat还提供了一些更详细的I/O状态数据，比如</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">r/s: 每秒完成的读 I/O 设备次数。</div><div class="line">w/s: 每秒完成的写 I/O 设备次数。</div><div class="line">rkB/s: 每秒读K字节数.是 rsect/s 的一半,因为每扇区大小为512字节。</div><div class="line">wkB/s: 每秒写K字节数.是 wsect/s 的一半。</div><div class="line">avgrq-sz: 平均每次设备I/O操作的数据大小 (扇区)。</div><div class="line">avgqu-sz: 平均I/O队列长度。</div><div class="line">await: 平均每次设备I/O操作的等待时间 (毫秒)。</div><div class="line">svctm: 平均每次设备I/O操作的服务时间 (毫秒)。</div><div class="line">%util: 一秒中有百分之多少的时间用于 I/O 操作,或者说一秒中有多少时间 I/O 队列是非空的。</div></pre></td></tr></table></figure>
<h1 id="五、进程监控"><a href="#五、进程监控" class="headerlink" title="五、进程监控"></a>五、进程监控</h1><h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><p>前面介绍过的top命令中可以对进程进行监控，其中一行就输出了进程的总体情况：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">top - 16:49:46 up 8 days,  5:47,  4 users,  load average: 3.16, 2.35, 1.93</div><div class="line">Tasks: 283 total,   2 running, 281 sleeping,   0 stopped,   0 zombie</div><div class="line">%Cpu(s): 34.5 us,  4.2 sy,  1.9 ni, 54.9 id,  3.4 wa,  0.0 hi,  1.2 si,  0.0 st</div><div class="line">KiB Mem : 16268312 total,   180712 free,  4489116 used, 11598484 buff/cache</div><div class="line">KiB Swap:  8257532 total,  8030448 free,   227084 used. 11335652 avail Mem</div></pre></td></tr></table></figure>
<p>默认情况下，top按照CPU使用率对各个进程进行排序。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                          </div><div class="line"> 7079 chrony    20   0 46.099g 2.297g  40584 S 150.8 14.8   2260:05 java                                                                                                             </div><div class="line"> 7283 libstor+  39  19 4799032 840580   6028 S   9.2  5.2   1050:22 java                                                                                                             </div><div class="line"> 3262 root      20   0  377552   6924   3312 R   1.0  0.0 112:09.99 vmtoolsd                                                                                                         </div><div class="line">    3 root      20   0       0      0      0 S   0.7  0.0   2:45.35 ksoftirqd/0                                                                                                      </div><div class="line"> 7312 saslauth  20   0 1256080  79980   5076 S   0.7  0.5  78:12.30 node                                                                                                             </div><div class="line">14999 root      20   0  157852   2420   1560 R   0.7  0.0   0:00.17 top                                                                                                              </div><div class="line">    9 root      20   0       0      0      0 S   0.3  0.0  15:35.03 rcu_sched</div></pre></td></tr></table></figure>
<ul>
<li>RES：进程使用的物理内存大小</li>
<li>SHR：进程共享内存大小</li>
<li>S：进程状态（R表示运行 ，S表示睡眠，Z表示僵死，D表示不可中断的睡眠）</li>
</ul>
<p>在top运行状态下，输入M按内存使用率排序、输入P按CPU占用率排序、输入T按累计时间排序、输入c显示进程的启动命令，输入u显示指定用户的进程。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">top -p &lt;pid&gt;</div></pre></td></tr></table></figure>
<h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p>ps（Process Status，进程状态）命令是最基本同时也是非常强大的进程查看命令，最常用的命令就是ps aux——显示当前所有进程</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ps aux | grep root       <span class="comment"># 输出root用户的所有进程</span></div><div class="line">ps -p &lt;pid&gt; -L            <span class="comment"># 显示进程&lt;pid&gt;的所有线程</span></div><div class="line">ps <span class="_">-e</span> -o pid,uname,pcpu,pmem,comm  <span class="comment"># 定制显示的列</span></div><div class="line">ps -o lstart &lt;pid&gt;        <span class="comment"># 显示进程的启动时间</span></div></pre></td></tr></table></figure>
<p>ps命令的输出可以按任意某一列进行排序，通过使用内部排序键（列的别名），例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ps aux --sort=+rss         <span class="comment"># 按内存升序排列</span></div><div class="line">ps aux --sort=-rss        <span class="comment"># 按内存降序排列</span></div><div class="line">ps aux --sort=+%cpu        <span class="comment"># 按cpu升序排列</span></div><div class="line">ps aux --sort=-%cpu       <span class="comment"># 按cpu降序排列</span></div></pre></td></tr></table></figure></p>
<p>ps命令的用法太多了，掌握一些常用的用法就好。如需了解更多的可选项，可以查看<a href="http://man.linuxde.net/" target="_blank" rel="external">man手册</a>。</p>
]]></content>
      
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java基础知识点滴]]></title>
      <url>/2017/07/03/java%E5%9F%BA%E7%A1%80%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h3 id="StringBuilder-最佳实践-预估长度大小"><a href="#StringBuilder-最佳实践-预估长度大小" class="headerlink" title="StringBuilder 最佳实践 预估长度大小"></a><a href="http://calvin1978.blogcn.com/articles/stringbuilder.html" target="_blank" rel="external">StringBuilder</a> 最佳实践 预估长度大小</h3><blockquote>
<p>StringBuilder的内部有一个char[]</p>
<p>默认长度是16</p>
<p>System.arraycopy成倍复制扩容</p>
<p><strong> + </strong>        +XX:+OptimizeStringConcat(JDK7u40后默认打开)，<br> 把相邻的(中间没隔着控制语句) </p>
</blockquote>
<a id="more"></a>
<h3 id="Map家族"><a href="#Map家族" class="headerlink" title="Map家族"></a><a href="http://calvin1978.blogcn.com/articles/hashmap.html" target="_blank" rel="external">Map家族</a></h3><blockquote>
<p>考虑加载因子地设定初始大小</p>
<p>减小加载因子</p>
<p>String类型的key，不能用==判断或者可能有哈希冲突时，尽量减少长度</p>
<p>使用定制版的EnumMap</p>
<p>使用IntObjectHashMap</p>
</blockquote>
<h4 id="HashMap-get-Object-key-步骤"><a href="#HashMap-get-Object-key-步骤" class="headerlink" title="HashMap.get(Object key) 步骤"></a>HashMap.get(Object key) 步骤</h4><ul>
<li>获取key的HashCode并二次加工  </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">16</span>); <span class="comment">//java8</span></div></pre></td></tr></table></figure>
<ul>
<li>落桶 </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index = hash &amp; (array.length-<span class="number">1</span>);</div></pre></td></tr></table></figure>
<ul>
<li>最后选择Entry</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k)))</div><div class="line">	<span class="keyword">return</span> e.value;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GIT常用操作记录]]></title>
      <url>/2017/06/29/GIT%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="批量更新目录下所有仓库"><a href="#批量更新目录下所有仓库" class="headerlink" title="批量更新目录下所有仓库"></a>批量更新目录下所有仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="keyword">for</span> dir <span class="keyword">in</span> $(ls <span class="_">-d</span> */)</div><div class="line"><span class="keyword">do</span></div><div class="line">  <span class="keyword">if</span> [ <span class="_">-d</span> <span class="string">"<span class="variable">$dir</span>"</span>/.git ]; <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$dir</span>"</span> &amp;&amp; <span class="built_in">cd</span> <span class="string">"<span class="variable">$dir</span>"</span> &amp;&amp; git pull &amp;&amp; <span class="built_in">cd</span> ..</div><div class="line">  <span class="keyword">fi</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="查看、添加、提交、删除、找回，重置修改文件"><a href="#查看、添加、提交、删除、找回，重置修改文件" class="headerlink" title="查看、添加、提交、删除、找回，重置修改文件"></a>查看、添加、提交、删除、找回，重置修改文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">help</span> &lt;<span class="built_in">command</span>&gt; <span class="comment"># 显示command的help</span></div><div class="line"></div><div class="line">git show <span class="comment"># 显示某次提交的内容 git show $id</span></div><div class="line"></div><div class="line">git co -- &lt;file&gt; <span class="comment"># 抛弃工作区修改</span></div><div class="line"></div><div class="line">git co . <span class="comment"># 抛弃工作区修改</span></div><div class="line"></div><div class="line">git add &lt;file&gt; <span class="comment"># 将工作文件修改提交到本地暂存区</span></div><div class="line"></div><div class="line">git add . <span class="comment"># 将所有修改过的工作文件提交暂存区</span></div><div class="line"></div><div class="line">git rm &lt;file&gt; <span class="comment"># 从版本库中删除文件</span></div><div class="line"></div><div class="line">git rm &lt;file&gt; --cached <span class="comment"># 从版本库中删除文件，但不删除文件</span></div><div class="line"></div><div class="line">git reset &lt;file&gt; <span class="comment"># 从暂存区恢复到工作文件</span></div><div class="line"></div><div class="line">git reset -- . <span class="comment"># 从暂存区恢复到工作文件</span></div><div class="line"></div><div class="line">git reset --hard <span class="comment"># 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</span></div><div class="line"></div><div class="line">git ci &lt;file&gt; git ci . git ci <span class="_">-a</span> <span class="comment"># 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am "some comments"</span></div><div class="line"></div><div class="line">git ci --amend <span class="comment"># 修改最后一次提交记录</span></div><div class="line"></div><div class="line">git revert &lt;<span class="variable">$id</span>&gt; <span class="comment"># 恢复某次提交的状态，恢复动作本身也创建次提交对象</span></div><div class="line"></div><div class="line">git revert HEAD <span class="comment"># 恢复最后一次提交的状态</span></div></pre></td></tr></table></figure>
<h3 id="查看文件diff"><a href="#查看文件diff" class="headerlink" title="查看文件diff"></a>查看文件diff</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">git diff &lt;file&gt; <span class="comment"># 比较当前文件和暂存区文件差异 git diff</span></div><div class="line"></div><div class="line">git diff &lt;id1&gt;&lt;id1&gt;&lt;id2&gt; <span class="comment"># 比较两次提交之间的差异</span></div><div class="line"></div><div class="line">git diff &lt;branch1&gt;..&lt;branch2&gt; <span class="comment"># 在两个分支之间比较</span></div><div class="line"></div><div class="line">git diff --staged <span class="comment"># 比较暂存区和版本库差异</span></div><div class="line"></div><div class="line">git diff --cached <span class="comment"># 比较暂存区和版本库差异</span></div><div class="line"></div><div class="line">git diff --stat <span class="comment"># 仅仅比较统计信息</span></div></pre></td></tr></table></figure>
<h2 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span> git <span class="built_in">log</span> &lt;file&gt; <span class="comment"># 查看该文件每次提交记录</span></div><div class="line"></div><div class="line">git <span class="built_in">log</span> -p &lt;file&gt; <span class="comment"># 查看每次详细修改内容的diff</span></div><div class="line"></div><div class="line">git <span class="built_in">log</span> -p -2 <span class="comment"># 查看最近两次详细修改内容的diff</span></div><div class="line"></div><div class="line">git <span class="built_in">log</span> --stat <span class="comment">#查看提交统计信息</span></div></pre></td></tr></table></figure>
<h3 id="Mac上可以使用tig代替diff和log，brew-install-tig"><a href="#Mac上可以使用tig代替diff和log，brew-install-tig" class="headerlink" title="Mac上可以使用tig代替diff和log，brew install tig"></a>Mac上可以使用tig代替diff和log，brew install tig</h3><h2 id="Git本地分支管理"><a href="#Git本地分支管理" class="headerlink" title="Git本地分支管理"></a>Git本地分支管理</h2><h3 id="查看、切换、创建和删除分支"><a href="#查看、切换、创建和删除分支" class="headerlink" title="查看、切换、创建和删除分支"></a>查看、切换、创建和删除分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">git br -r <span class="comment"># 查看远程分支</span></div><div class="line"></div><div class="line">git br &lt;new_branch&gt; <span class="comment"># 创建新的分支</span></div><div class="line"></div><div class="line">git br -v <span class="comment"># 查看各个分支最后提交信息</span></div><div class="line"></div><div class="line">git br --merged <span class="comment"># 查看已经被合并到当前分支的分支</span></div><div class="line"></div><div class="line">git br --no-merged <span class="comment"># 查看尚未被合并到当前分支的分支</span></div><div class="line"></div><div class="line">git co &lt;branch&gt; <span class="comment"># 切换到某个分支</span></div><div class="line"></div><div class="line">git co -b &lt;new_branch&gt; <span class="comment"># 创建新的分支，并且切换过去</span></div><div class="line"></div><div class="line">git co -b &lt;new_branch&gt; &lt;branch&gt; <span class="comment"># 基于branch创建新的new_branch</span></div><div class="line"></div><div class="line">git co <span class="variable">$id</span> <span class="comment"># 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span></div><div class="line"></div><div class="line">git co <span class="variable">$id</span> -b &lt;new_branch&gt; <span class="comment"># 把某次历史提交记录checkout出来，创建成一个分支</span></div><div class="line"></div><div class="line">git br <span class="_">-d</span> &lt;branch&gt; <span class="comment"># 删除某个分支</span></div><div class="line"></div><div class="line">git br -D &lt;branch&gt; <span class="comment"># 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span></div></pre></td></tr></table></figure>
<h3 id="分支合并和rebase"><a href="#分支合并和rebase" class="headerlink" title="分支合并和rebase"></a>分支合并和rebase</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git merge &lt;branch&gt; <span class="comment"># 将branch分支合并到当前分支</span></div><div class="line"></div><div class="line">git merge origin/master --no-ff <span class="comment"># 不要Fast-Foward合并，这样可以生成merge提交</span></div><div class="line"></div><div class="line">git rebase master &lt;branch&gt; <span class="comment"># 将master rebase到branch，相当于： git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Git补丁管理-方便在多台机器上开发同步时用"><a href="#Git补丁管理-方便在多台机器上开发同步时用" class="headerlink" title="Git补丁管理(方便在多台机器上开发同步时用)"></a>Git补丁管理(方便在多台机器上开发同步时用)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git diff &gt; ../sync.patch <span class="comment"># 生成补丁</span></div><div class="line"></div><div class="line">git apply ../sync.patch <span class="comment"># 打补丁</span></div><div class="line"></div><div class="line">git apply --check ../sync.patch <span class="comment">#测试补丁能否成功</span></div></pre></td></tr></table></figure>
<h3 id="Git暂存管理"><a href="#Git暂存管理" class="headerlink" title="Git暂存管理"></a>Git暂存管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git stash <span class="comment"># 暂存</span></div><div class="line"></div><div class="line">git stash list <span class="comment"># 列所有stash</span></div><div class="line"></div><div class="line">git stash apply <span class="comment"># 恢复暂存的内容</span></div><div class="line"></div><div class="line">git stash drop <span class="comment"># 删除暂存区</span></div></pre></td></tr></table></figure>
<h3 id="Git远程分支管理"><a href="#Git远程分支管理" class="headerlink" title="Git远程分支管理"></a>Git远程分支管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">git pull <span class="comment"># 抓取远程仓库所有分支更新并合并到本地</span></div><div class="line"></div><div class="line">git pull --no-ff <span class="comment"># 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span></div><div class="line"></div><div class="line">git fetch origin <span class="comment"># 抓取远程仓库更新</span></div><div class="line"></div><div class="line">git merge origin/master <span class="comment"># 将远程主分支合并到本地当前分支</span></div><div class="line"></div><div class="line">git co --track origin/branch <span class="comment"># 跟踪某个远程分支创建相应的本地分支</span></div><div class="line"></div><div class="line">git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt; <span class="comment"># 基于远程分支创建本地分支，功能同上</span></div><div class="line"></div><div class="line">git push <span class="comment"># push所有分支</span></div><div class="line"></div><div class="line">git push origin master <span class="comment"># 将本地主分支推到远程主分支</span></div><div class="line"></div><div class="line">git push -u origin master <span class="comment"># 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</span></div><div class="line"></div><div class="line">git push origin &lt;local_branch&gt; <span class="comment"># 创建远程分支， origin是远程仓库名</span></div><div class="line"></div><div class="line">git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; <span class="comment"># 创建远程分支</span></div><div class="line"></div><div class="line">git push origin :&lt;remote_branch&gt; <span class="comment">#先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</span></div></pre></td></tr></table></figure>
<h3 id="Git远程仓库管理"><a href="#Git远程仓库管理" class="headerlink" title="Git远程仓库管理"></a>Git远程仓库管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git remote -v <span class="comment"># 查看远程服务器地址和仓库名称</span></div><div class="line"></div><div class="line">git remote show origin <span class="comment"># 查看远程服务器仓库状态</span></div><div class="line"></div><div class="line">git remote add origin git@ github:robbin/robbin_site.git <span class="comment"># 添加远程仓库地址</span></div><div class="line"></div><div class="line">git remote <span class="built_in">set</span>-url origin git@ github.com:robbin/robbin_site.git <span class="comment"># 设置远程仓库地址(用于修改远程仓库地址) git remote rm &lt;repository&gt; # 删除远程仓库</span></div></pre></td></tr></table></figure>
<h3 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> --bare robbin_site robbin_site.git <span class="comment"># 用带版本的项目创建纯版本仓库</span></div><div class="line"></div><div class="line">scp -r my_project.git git@ git.csdn.net:~ <span class="comment"># 将纯仓库上传到服务器上</span></div><div class="line"></div><div class="line">mkdir robbin_site.git &amp;&amp; <span class="built_in">cd</span> robbin_site.git &amp;&amp; git --bare init <span class="comment"># 在服务器创建纯仓库</span></div><div class="line"></div><div class="line">git remote add origin git@ github.com:robbin/robbin_site.git <span class="comment"># 设置远程仓库地址</span></div><div class="line"></div><div class="line">git push -u origin master <span class="comment"># 客户端首次提交</span></div><div class="line"></div><div class="line">git push -u origin develop <span class="comment"># 首次将本地develop分支提交到远程develop分支，并且track</span></div><div class="line"></div><div class="line">git remote <span class="built_in">set</span>-head origin master <span class="comment"># 设置远程仓库的HEAD指向master分支</span></div></pre></td></tr></table></figure>
<h3 id="也可以命令设置跟踪远程库和本地库"><a href="#也可以命令设置跟踪远程库和本地库" class="headerlink" title="也可以命令设置跟踪远程库和本地库"></a>也可以命令设置跟踪远程库和本地库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git branch --set-upstream master origin/master</div><div class="line"></div><div class="line">git branch --set-upstream develop origin/develop</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java基础笔记之多线程]]></title>
      <url>/2017/06/26/Java%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="1、进程和线程的概念"><a href="#1、进程和线程的概念" class="headerlink" title="1、进程和线程的概念"></a>1、进程和线程的概念</h2><p>当一个程序进入内存运行时，即变成一个进程（Process）。进程是系统进行资源分配和调度的一个独立单位。</p>
<a id="more"></a>
<h3 id="进程三特征："><a href="#进程三特征：" class="headerlink" title="进程三特征："></a>进程三特征：</h3><ul>
<li><strong>独立性</strong>：进程是系统中独立存在的实体，拥有自己独立的资源和地址空间；</li>
<li><strong>动态性</strong>：进程与程序的区别在于，程序只是一个静态的指令集合，而进程是一个正在系统中执行的指令集合，进程具有自己的生命周期和状态；</li>
<li><strong>并发性</strong>：多个进程可以在单个处理器上并发执行，互不影响。（与<strong>并行</strong>不是一个概念）</li>
</ul>
<p>线程（Thread）是进程的执行单元，独立、并发的执行流，被称为轻量级进程。</p>
<ul>
<li>线程可以拥有自己的堆栈、自己的程序计数器、自己的局部变量，但不拥有系统资源</li>
<li>一个进程中可以有多个线程，它们共享该进程的全部资源</li>
<li>多个线程并发地执行</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 基础 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
